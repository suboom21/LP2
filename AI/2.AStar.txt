def print_board(elements):
    for i in range(9):
        if i % 3 == 0:
            print()
        if elements[i] == -1:
            print("_", end=" ")
        else:
            print(elements[i], end=" ")
    print()


def solvable(start):
    inv = 0
    for i in range(9):
        if start[i] == -1:
            continue
        for j in range(i + 1, 9):
            if start[j] == -1:
                continue
            if start[i] > start[j]:
                inv += 1
    return inv % 2 == 0


def heuristic(start, goal):
    h = 0
    for i in range(9):
        if start[i] != -1:
            current_row, current_col = i // 3, i % 3
            goal_index = goal.index(start[i])
            goal_row, goal_col = goal_index // 3, goal_index % 3
            h += abs(current_row - goal_row) + abs(current_col - goal_col)
    return h


def moveleft(s, p):
    s[p], s[p - 1] = s[p - 1], s[p]

def moveright(s, p):
    s[p], s[p + 1] = s[p + 1], s[p]

def moveup(s, p):
    s[p], s[p - 3] = s[p - 3], s[p]

def movedown(s, p):
    s[p], s[p + 3] = s[p + 3], s[p]

def movetile(start, goal, g):
    empty = start.index(-1)
    row, col = empty // 3, empty % 3
    t1, t2, t3, t4 = start[:], start[:], start[:], start[:]
    f1, f2, f3, f4 = 100, 100, 100, 100
    
    if col - 1 >= 0:
        moveleft(t1, empty)
        f1 = heuristic(t1, goal) + g
    if col + 1 < 3:
        moveright(t2, empty)
        f2 = heuristic(t2, goal) + g
    if row + 1 < 3:
        movedown(t3, empty)
        f3 = heuristic(t3, goal) + g
    if row - 1 >= 0:
        moveup(t4, empty)
        f4 = heuristic(t4, goal) + g
        
    min_h = min(f1, f2, f3, f4)
    if f1 == min_h:
        moveleft(start, empty)
    elif f2 == min_h:
        moveright(start, empty)
    elif f3 == min_h:
        movedown(start, empty)
    elif f4 == min_h:
        moveup(start, empty)
    
    return min_h - g


def solveEight(start, goal):
    g = 0
    while True:
        print_board(start)
        f = heuristic(start, goal)
        print(f"f(n): {f}")
        if f == 0:
            print("Solved!")
            break
        g += movetile(start, goal, g)

start = [1, 2, 3, -1, 4, 6, 7, 5, 8]
goal = [1, 2, 3, 4, 5, 6, 7, 8, -1]
'''print("Enter the start state: ")
for i in range (9):
    start.append(int(input()))
print("Enter the goal state: ")
for i in range (9):
    goal.append(int(input()))
print("-----------------------------------------------")'''

print("Start state: ")
print_board(start)
print("-----------------------------------------------")
if solvable(start):
    solveEight(start, goal)
else:
    print("Not possible to solve")